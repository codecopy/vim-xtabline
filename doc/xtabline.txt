*xtabline.txt*    Version 0.4.0    Last change: August 14 2019

XTABLINE - TABLE OF CONTENTS                                        *xtabline*
==============================================================================

  Introduction                                   |xtabline-introduction|
  Features                                       |xtabline-features|
  Tabline rendering                              |xtabline-rendering|
  Main mappings and commands                     |xtabline-mappings|
  Main settings                                  |xtabline-init|
  Tabline modes                                  |xtabline-modes|
  Buffers mode                                   |xtabline-buffers|
  Rename tabs and buffers                        |xtabline-rename|
  Tabs commands                                  |xtabline-tabs|
  Session management                             |xtabline-sessions|
  Clean-up                                       |xtabline-clean-up|
  Tabline paths                                  |xtabline-paths|
  Other commands                                 |xtabline-other|
  Settings                                       |xtabline-settings|
  Other options                                  |xtabline-options|
  Additional notes                               |xtabline-notes|
  Credits                                        |xtabline-credits|
  License                                        |xtabline-license|



INTRODUCTION                                           *xtabline-introduction*
==============================================================================

This plugin tries to give you full control on the tabline:

* three tabline modes: tabs, (filtered) buffers, |arglist|
* buffer filtering on the base of the CWD (also local)
* rename tabs and/or buffers, and assign them icons

Also:

* tab CWD/name is shown in the right corner of the tabline
* commands to quickly set/change (tab/window) working directory
* reopen closed tabs
* clean up buffers across all tabs
* session management and tabs bookmarks

With the help of:

* |vim-obsession| for optional persistance (for custom names and icons)





FEATURES LIST                                             *xtabline-features*
==============================================================================

The main features of the plugin are:

- custom tabline rendering    |xtabline-rendering|
- |:cd| mappings                |xtabline-directories|
- rename tabs/buffers         |xtabline-rename|
- sessions management         |xtabline-sessions|





TABLINE RENDERING                                         *xtabline-rendering*
==============================================================================

The tabline can be rendered in three different modes:

- 'tabs':     tab name, CWD, or buffer name
- 'arglist':  buffers contained in the arglist
- 'buffers':  up to a max of N (default 10) recent buffers

Default order is ['tabs', 'buffers', 'arglist'].

In *tabs-mode* , the tabline will show the numbered tabs. This is the closest to
vim default tabline, and it's the default mode.

In *arglist-mode* , the tabline will show the files included in the arglist.
You can switch file with the usual commands (|:next|, etc). Note that if the
arglist is empty, this mode won't be available.

This mode can also be enabled automatically when the current buffer is in the
|argument-list|: see |auto_arglist_mode|.

In *buffers-mode* , the tabline will show a list of the most recently accessed
buffers (10 by default). This list will be filtered on the base of the current
tab's CWD, if |buffer_filtering| is active.

Buffer filtering makes sense if per-tab CWD is being used, either via |:tcd|
or |:lcd|. It means that in the tabline, only buffers whose path is within the
current CWD will be listed.

Buffers and tabs can be renamed, and also given a custom icon.




MAIN MAPPINGS AND COMMANDS                                 *xtabline-mappings*
==============================================================================

The following are used to change tabline mode and to toggle filtering:

*XTabMode*  [mode]  will cycle the tabline among the modes defined by the
                  |xtabline-tabline_modes| setting, or set the chosen mode.

*XTabFiltering*     will toggle buffer filtering, based on either the tab's
                  CWD or base directory.

There is also a set of commands to quickly change the CWD, with mappings that
start with `cd`. The default directory is either a git repository or the
directory of the current file.

If the command is used with <bang>, directory prompt is skipped.

Command            Mapping~
*XTabWD* [!] [dir]    cdw     Set the global CWD
*XTabLD* [!] [dir]    cdl     Set a window-local WD
*XTabTD* [!] [dir]    cdt     Set a tab-local WD (where supported)
*XTabCD* [!] [dir]    cdc     |:cd| to `[count parent]` directory of current buffer
*XTabInfo*            cd?     show current cwd (global/local/tab), git dir, tags

------------------------------------------------------------------------------

Mappings can be disabled (|xtabline-enable_mappings|) or redefined (by
directly mapping ex commands).


    <F5>        mapping for |XTabMode|.

    [count]<BS> used to select tabs or buffers. See |xtabline-select-buffer|.

    cd...       mappings for setting the CWD, as described above.


Most other mappings use a |map_prefix|, default is <leader>x:

    <leader>x?  show all default mappings.






MAIN SETTINGS                                                  *xtabline-init*
==============================================================================

Here are described the most important settings, for the full list read
|xtabline-settings|.

First you have to initialize the settings dictionary:
>
    let g:xtabline_settings = {}


-------------------------------------------------------- *xtabline-map_prefix*
>
    let g:xtabline_settings.map_prefix = '<leader>x'

Most xtabline mappings are associated to a prefix.
This means that most commands will be mapped to `<leader>x` + a modifier.
You can change the prefix and all mappings will be changed accordingly.
Most mappings presented are meant prefixed by <prefix>, when preceded by `*`.


----------------------------------------------------- *xtabline-tabline_modes*
>
    let g:xtabline_settings.tabline_modes = ['tabs', 'buffers', 'arglist']

The modes that can be put in this list are:

- |tabs|:       similar to the default vim tabline, with CWD in the corner
- |buffers|:    buffer names, formatted with |xtabline-buffer_format|.
- |arglist|:    the files contained in the arglist, as shown by |:args|

The modes can be cycled with <F5> (default).


-------------------------------------------------- *xtabline-buffer_filtering*
>
    let g:xtabline_settings.buffer_filtering = 1
<
Set this value to 0 to disable directory-based buffer filtering.






BUFFERS-MODE                                                *xtabline-buffers*
==============================================================================
                                                      *xtabline-select-buffer*
Plug                              Mapping~
<Plug>(XT-Select-Buffer)          [count] <BS>

Command                           Mapping~
XTabNextBuffer                    [count] ]b
XTabPrevBuffer                    [count] [b
XTabCloseBuffer                   *q
XTabHideBuffer                    *h
XTabMoveBuffer                    *m
XTabMoveBufferNext                *]
XTabMoveBufferPrev                *[
XTabPinBuffer                     *p

------------------------------------------------------------------------------

`Select-Buffer` works this way:

* it needs a [count] to work, eg. 2<BS> would bring you to buffer #2
* when not using a [count], it will execute a command of your choice

Define this command by changing the |select_buffer_alt_action| setting.
Default is `:buffer #` (go to alternate buffer).

When in |tabs-mode|, [count]<BS> can still be used, and will bring you to the
N tab (<BS> is an alias for |gt| in this case).

In |args-mode| it will select the N buffer in the |arglist|, as they are ordered
in the tabline.

------------------------------------------------------------------------------

*XTabNextBuffer* and *XTabPrevBuffer* accept a [count], to move to Â±N buffer,
as they are shown in the tabline.  If moving beyond the limit, it will start
from the start (or the end).

------------------------------------------------------------------------------

*XTabCloseBuffer* will close and delete the current buffer, while keeping the
window open, and loading either:

* the alternate buffer
* a valid buffer for the tab

------------------------------------------------------------------------------

*XTabHideBuffer* removes the buffer from the list of recent buffers for the
tab, effectively hiding it from the tabline if there are enough tab buffers,
so that the next most recent one will take its place. Then [count] buffer will
be selected, as by |Select-Buffer|. Selects first if no count is given.
Differently from |XTabCloseBuffer|, the buffer is not deleted.

------------------------------------------------------------------------------

*XTabMoveBuffer* will move the current buffer at [count] position, or first if
no count is given.

------------------------------------------------------------------------------

*XTabMoveBufferNext* and *XTabMoveBufferPrev* move the current buffer to the
next/previous position in the tabline, but they only work for buffers that are
considered valid for the current tab.

------------------------------------------------------------------------------

*XTabPinBuffer* pins a buffer, so that it will be visible in all tabs.






RENAME TABS AND BUFFERS                                      *xtabline-rename*
==============================================================================

You can customize tabs and buffers to give them a special name or icon.
You can do this with the following commands:

Command                Mapping    Notes~
*XTabNameTab*            *tn        custom label for tab
*XTabNameBuffer*         *bn                     ... buffer
*XTabIconTab*            *ti        icon for tab
*XTabIconBuffer*         *bi             ... buffer
*XTabResetTab*           *tr        remove label/icon for tab
*XTabResetBuffer*        *br                          ... buffer
*XTabToggleLabels*       *.         visibility of custom names/icons






TABS COMMANDS                                                  *xtabline-tabs*
==============================================================================


Command                Mapping    Notes~
*XTabLast*               *\         brings you back to the last visited tab
*XTabReopen*             *u         reopen last closed tab
*XTabReopenList*         *U         reopen a previosly closed tab (from list)

*XTabListTabs*           *a         list tabs with CWDs of their active window
*XTabListBuffers*        *z         list valid buffers for this tab

*XTabLoadTab*            *tl        load a tab bookmark
*XTabSaveTab*            *ts        save   ,,   ,,
*XTabDeleteTab*          *td        delete ,,   ,,

Saved tab bookmarks are stored in `.XTablineBookmarks`, located in your user
vim (or neovim) directory.





SESSION MANAGEMENT                                         *xtabline-sessions*
==============================================================================

Command                Mapping ~
*XTabLoadSession*        *sl
*XTabSaveSession*        *ss
*XTabDeleteSession*      *sd
*XTabNewSession*         *sn

Session descriptions are stored in `.XTablineSessions`, located in your user
vim (or neovim) directory.

When loading sessions, the last modification date will be shown, along with
the description and the symbol `[%]` that marks the active session (if any).






CLEAN-UP                                                   *xtabline-clean-up*
==============================================================================

Command                Mapping~
XTabResetAll           *R
XTabPurge              *x
XTabCleanUp            *k
XTabCleanUp!           *K
XTabDeleteBuffers      *bd


*XTabResetAll*

A sort of panic button to remove all tabs/buffers user customizations.

*XTabPurge*

This command is handy to close all buffers that aren't bound to a physical
file (eg. git logs, previews, quickfix windows etc). The tab won't be closed.

*XTabCleanUp* [!]

This command deletes all buffers from the global buffers list, that are not
valid for any of the current tabs. Useful to get rid of terminal buffers in
neovim, for example, or to keep slim your buffer list.

With a bang, it also deletes tab buffers, leaving only the currently open
windows/buffers for each tab.

*XTabDeleteBuffers*

Run |:bdelete| on selected buffers (with fzf).




TABLINE PATHS                                                 *xtabline-paths*
==============================================================================
                                                      *xtabline-buffers_paths*
                                                  *xtabline-current_tab_paths*
                                                   *xtabline-other_tabs_paths*

Both in 'tabs' and 'buffers' mode, the path can be displayed in several ways.
Vim's default is to show a shortened version of the file's path, with
directory names reduced to a single letter. It generally gives you an idea of
the file position, and it's still the default in xtabline.

You can change this behaviour by altering the following settings:
>
    let g:xtabline_settings.buffers_paths = 1
    let g:xtabline_settings.current_tab_paths = 1
    let g:xtabline_settings.other_tabs_paths = 1

As the names suggest, the first one is used in |buffers-mode|, the other ones
in |tabs-mode|. They follow the same logic, for example, given a path
`long/path/to/file.ext`, this is how different values would look:

     `-2`  ->   path/to/file.ext
     `-1`  ->   to/file.ext
     ` 0`  ->   file.ext
     ` 1`  ->   l/p/t/file.ext      (default)
     ` 2`  ->   l/p/to/file.ext

For |tabs-mode| there are two different settings, because I personally prefer
to show only the basename for tabs other than the current one, and not the
shortened full path, as is Vim default. This can be achieved by setting:
>
    let g:xtabline_settings.other_tabs_paths = 0


------------------------------------------------------------------ *XTabPaths*
Command                           Mapping~
XTabPaths  [count]                *+
XTabPaths! [count]                *-

These commands (and relative mappings) can be used to temporarily change the
settings described above.

Note that they will change a different setting, based on the current mode:

  |tabs-mode|     ->   `current_tab_paths`
  |buffers-mode|  ->   `buffers_paths`

There are two mappings, *+ and *-, with the second one that sets a negative
value.

Without a [count], the commands toggle between a value of 0 (basename only)
and +1/-1 (respectively).





OTHER COMMANDS                                                *xtabline-other*
==============================================================================

Command                Mapping    Notes~
*XTabTodo*               *d
*XTabTheme*  [theme]     *T
*XTabNERDBookmarks*

Th |XTabTodo| command opens a todo file at the tab's CWD.

Inside the todo buffer, `\q` does |:update| and closes the buffer.

You can define the filename and other options:
>
  let g:xtabline_settings.todo = { 'file': '.TODO', 'prefix': 'below',
    \'command': 'sp', 'size': 20, 'syntax': 'markdown'}

`file`    : the filename that will be used
`command` : eg. `below 20sp`, `vs`, `edit`, etc, check |opening-window|
`syntax`  : the filetype that will be assigned


|XTabTheme| prints the current theme, or sets the given one.

|XTabNERDBookmarks| opens the list of |NERDTreeBookmarks| with fzf.





SETTINGS                                                   *xtabline-settings*
==============================================================================
                                                         *xtabline-enabled*  >
    let g:xtabline_settings.enabled = 1

If set to 0, xtabline is disabled. You can also disable it per-buffer, if you
set a buffer variable:
>
  let b:no_xtabline = 1
<

--------------------------------------------------- *xtabline-enable_mappings*
>
    let g:xtabline_settings.enable_mappings = 1

Mappings are enabled by default.


------------------------------------------------ *xtabline-enable_persistance*
>
    let g:xtabline_settings.enable_persistance = 0

Persistance is disabled by default. It is used to save in current session file
informations such as custom tabs labels or pinned buffers.


------------------------------------------------- *xtabline-show_right_corner*
>
    let g:xtabline_settings.show_right_corner = 1
<
Set this value to 0 to remove the label on the right corner of the tabline.


------------------------------------------------- *xtabline-auto_arglist_mode*
>
    let g:xtabline_settings.auto_arglist_mode = 0
<
Set this value to 1 to enable automatic mode change.

By setting this option, when in |tabs-mode|, entering a buffer that belongs to
the |argument-list|, the tabline mode switches to |arglist-mode|. The previous
mode is reenabled when you switch to a buffer that doesn't belong to the list.

Note: in |buffers-mode| this option has no effect.

Note: if this option is enabled, |select-buffer| will behave as in
|tabs-mode|, to avoid confusion. Use |:next| and |:prev| to switch buffers in
the |arglist|.


---------------------------------------- *xtabline-tab_number_in_buffers_mode*
>
    let g:xtabline_settings.tab_number_in_buffers_mode = 1
<
In buffers mode, normally the tab's number is displayed in the top right
corner. Set this value to 0 to hide it when there is a single tab.


---------------------------------------------------- *xtabline-recent_buffers*
>
    let g:xtabline_settings.recent_buffers = 10

The number of buffers that can be shown in the tabline is limited (by default)
to the 10 most recently accessed buffers.


------------------------------------------------------ *xtabline-special_tabs*
>
    let g:xtabline_settings.special_tabs = 0

In |tabs-mode|, special buffers don't have a special highlighting by default.
Set to 1 if you want it also in tabs mode.


--------------------------------------------------- *xtabline-last_open_first*
>
    let g:xtabline_settings.last_open_first = 0

Valid buffers will be ordered by time of access. Note that special or extra
buffers can still be listed before them, but they are also highlighted
differently.


----------------------------------------------------- *xtabline-buffer_format*
>
    let g:xtabline_settings.buffer_format = 2

This setting controls how the buffers are formatted in the tabline. Valid
values are:

  `1`       the buffer number (as by bufnr('%')), and the buffer base name
  `2`       the buffer position in the tabline, and the buffer base name
  `func`    a funcref (the buffer number is passed as parameter)

Function example:
>
    fun! MyBuflineFormat(bufnr)
      let A = '%#TabLineSel#'
      let B = bufnr('%') == a:bufnr ? '%#PmenuSel#' : '%#TabLine#'
      let name = bufname(a:bufnr) != '' ? bufname(a:bufnr) : '...'
      return printf('%s %s %s %s ', A, a:bufnr, B, name)
    endfun

    let g:xtabline_settings.buffer_format = function('MyBuflineFormat')


------------------------------------------------------ *xtabline-use_devicons*
>
    let g:xtabline_settings.use_devicons = 1
<
Enabled by default, if |vim-devicons| is installed, labels will use the
filetype icon provided by said plugin. A custom icon has higher precedence.


------------------------------------------------- *xtabline-wd_type_indicator*
>
    let g:xtabline_settings.wd_type_indicator = 0
<
Disabled by default, if enabled it adds an indicator in the right corner:

- `W`: there is a window-local directory set for the current buffer
- `T`: there is a tab-local directory set for the current tab

Only one letter will be shown, and window-local directories override tab-local
ones.






OTHER OPTIONS                                               *xtabline-options*
==============================================================================

You can add any of these to your `.vimrc`, after having initialized the
`g:xtabline_settings` dictionary.

    let g:xtabline_settings = {}
    let g:xtabline_settings.option_name = option_value

{USERDIR} is the default directory that will be searched for sessions and data
files is either `/.vim`, `/vimfiles` or the neovim data directory.

---------------------------+--------------------------------------------------
Option                     | Default ~
---------------------------+--------------------------------------------------
select_buffer_alt_action   | `buffer #`
sessions_path              | {USERDIR}`/session`
bookmarks_file             | {USERDIR}`/.XTablineBookmarks`
sessions_data              | {USERDIR}`/.XTablineSessions`


LAZY LOADING                                                   *xtabline-lazy*

If you want to lazy load the plugin (since it can affect your startup time),
set: >
      let g:xtabline_lazy = 1

The plugin will then load after you add/create a buffer after the first one,
or you can initialize it with the command `XTablineInit`. Until then, mappings
and commands will not work.


FORMATTING                                               *xtabline-formatting*

---------------------------+--------------------------------------------------
Option                     | Default ~
---------------------------+--------------------------------------------------
buffers_paths              | 1
current_tab_paths          | 1
other_tabs_paths           | 1
buffer_format              | 2
tab_icon                   | ["ð", "ð"]

`icons` are the ones that can be used when assigning an icon to a tab/buffer,
and can be used in other contexts (special buffers icon).
>
  let g:xtabline_settings.indicators = {
      \ 'modified': '[+]',
      \ 'pinned': '[ð]',
      \}

  let g:xtabline_settings.icons = {
      \'pin': 'ð',
      \'star': 'â',
      \'book': 'ð',
      \'lock': 'ð',
      \'hammer': 'ð¨',
      \'tick': 'â',
      \'cross': 'â',
      \'warning': 'â ',
      \'menu': 'â°',
      \'apple': 'ð',
      \'linux': 'ð§',
      \'windows': 'â',
      \'git': 'î ',
      \'palette': 'ð¨',
      \'lens': 'ð',
      \'flag': 'ð',
      \}




FUNCTIONS                                                 *xtabline-functions*
==============================================================================


You can customize tabs/buffers through functions.

For `tabs`, you can use the function `xtabline#tab#set( tabnr, opts )`
Example:
>
  call xtabline#tab#set( 1, {'name': 'MyTab', 'icon': '@'} )

------------------------------------------------------------------------------

For `buffers`, you should use the function `xtabline#buffer#set`( nr, opts )
For example in a |ftplugin|:
>
  if exists('g:loaded_xtabline')
    let opts         = {}
    let opts.name    = 'MyBuffer'
    let opts.icon    = '#'
    " scratch buffers must be flagged as special or they will be ignored
    let opts.special = 1
    call xtabline#buffer#set(bufnr(''), opts)
  endif

------------------------------------------------------------------------------

You can also lock a tab, so that only certain buffers will be visible
>
  xtabline#tab#lock( tabnr, [buffers for tab], {tab options})

Example:
>
  call xtabline#tab#lock(tabpagenr(), [bufnr('')], {'name': 'MyTab', 'icon': '^'})






ADDITIONAL NOTES                                              *xtabline-notes*
==============================================================================

Note that |vim-obsession| isn't mandatory: the only caveat is that, if you
have it installed, xtabline will not touch session files by itself, and
persistance will not be enabled on sessions that aren't handled by
|vim-obsession|.

You may need some patched font for icons. In a Debian-based distribution you
can install the following packages:

- ttf-ancient-fonts-symbola
- fonts-powerline

In Windows, one of the pre-patched `nerd-fonts` is recommended.

     https://github.com/ryanoasis/nerd-fonts/releases





CREDITS                                                     *xtabline-credits*
==============================================================================

Bram Moolenaar for Vim
Aristotle Pagaltzis for [Buftabline]    https://github.com/ap/vim-buftabline
Giacomo Comitti for [Taboo]             https://github.com/gcmt/taboo.vim



LICENSE                                                     *xtabline-license*
==============================================================================

MIT


vim:tw=78:et:sw=2:ts=2:ft=help:nowrap:
